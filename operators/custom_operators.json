{
  "operators": {
    "add": {
      "name": "add",
      "display_name": "Addition",
      "description": "Add two numeric values",
      "function_code": "import numpy as np\ndef add(a, b):\n    return np.add(a, b)",
      "parameter_count": 2,
      "return_type": "float",
      "category": "arithmetic",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639341"
    },
    "sub": {
      "name": "sub",
      "display_name": "Subtraction",
      "description": "Subtract second value from first",
      "function_code": "import numpy as np\ndef sub(a, b):\n    return np.subtract(a, b)",
      "parameter_count": 2,
      "return_type": "float",
      "category": "arithmetic",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639359"
    },
    "mul": {
      "name": "mul",
      "display_name": "Multiplication",
      "description": "Multiply two numeric values",
      "function_code": "import numpy as np\ndef mul(a, b):\n    return np.multiply(a, b)",
      "parameter_count": 2,
      "return_type": "float",
      "category": "arithmetic",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639363"
    },
    "pdiv": {
      "name": "pdiv",
      "display_name": "Protected Division",
      "description": "Divide first value by second with protection against division by zero",
      "function_code": "import numpy as np\ndef pdiv(a, b):\n    try:\n        with np.errstate(divide='ignore', invalid='ignore'):\n            return np.where(b == 0, np.ones_like(a), a / b)\n    except ZeroDivisionError:\n        return 1.0",
      "parameter_count": 2,
      "return_type": "float",
      "category": "arithmetic",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639365"
    },
    "sigmoid": {
      "name": "sigmoid",
      "display_name": "Sigmoid",
      "description": "Calculate the sigmoid of input values",
      "function_code": "import numpy as np\ndef sigmoid(arr):\n    if np.isscalar(arr):\n        arr = np.array([arr])\n    return 1 / (1 + np.exp(-arr))",
      "parameter_count": 1,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639367"
    },
    "psqrt": {
      "name": "psqrt",
      "display_name": "Protected Square Root",
      "description": "Calculate square root with absolute value protection",
      "function_code": "import numpy as np\ndef psqrt(a):\n    return np.sqrt(np.abs(a))",
      "parameter_count": 1,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639369"
    },
    "psin": {
      "name": "psin",
      "display_name": "Sine",
      "description": "Calculate sine of input values",
      "function_code": "import numpy as np\ndef psin(n):\n    return np.sin(n)",
      "parameter_count": 1,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639371"
    },
    "pcos": {
      "name": "pcos",
      "display_name": "Cosine",
      "description": "Calculate cosine of input values",
      "function_code": "import numpy as np\ndef pcos(n):\n    return np.cos(n)",
      "parameter_count": 1,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639373"
    },
    "plog": {
      "name": "plog",
      "display_name": "Protected Logarithm",
      "description": "Calculate logarithm with protection",
      "function_code": "import numpy as np\ndef plog(a):\n    return np.log(1.0 + np.abs(a))",
      "parameter_count": 1,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639375"
    },
    "exp": {
      "name": "exp",
      "display_name": "Exponential",
      "description": "Calculate exponential of input values",
      "function_code": "import numpy as np\ndef exp(a):\n    return np.exp(a)",
      "parameter_count": 1,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639377"
    },
    "abs_": {
      "name": "abs_",
      "display_name": "Absolute Value",
      "description": "Calculate absolute value",
      "function_code": "import numpy as np\ndef abs_(a):\n    return np.abs(a)",
      "parameter_count": 1,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639379"
    },
    "minimum": {
      "name": "minimum",
      "display_name": "Minimum",
      "description": "Return minimum of two values",
      "function_code": "import numpy as np\ndef minimum(a, b):\n    return np.minimum(a, b)",
      "parameter_count": 2,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639381"
    },
    "maximum": {
      "name": "maximum",
      "display_name": "Maximum",
      "description": "Return maximum of two values",
      "function_code": "import numpy as np\ndef maximum(a, b):\n    return np.maximum(a, b)",
      "parameter_count": 2,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639382"
    },
    "min_": {
      "name": "min_",
      "display_name": "Min",
      "description": "Return minimum of two values",
      "function_code": "import numpy as np\ndef min_(a, b):\n    return np.minimum(a, b)",
      "parameter_count": 2,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639384"
    },
    "max_": {
      "name": "max_",
      "display_name": "Max",
      "description": "Return maximum of two values",
      "function_code": "import numpy as np\ndef max_(a, b):\n    return np.maximum(a, b)",
      "parameter_count": 2,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639386"
    },
    "neg": {
      "name": "neg",
      "display_name": "Negation",
      "description": "Negate the input value",
      "function_code": "def neg(a):\n    return -a",
      "parameter_count": 1,
      "return_type": "float",
      "category": "mathematical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639387"
    },
    "and_": {
      "name": "and_",
      "display_name": "Logical AND",
      "description": "Logical AND operation",
      "function_code": "import numpy as np\ndef and_(a, b):\n    return np.logical_and(a, b)",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "logical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639389"
    },
    "or_": {
      "name": "or_",
      "display_name": "Logical OR",
      "description": "Logical OR operation",
      "function_code": "import numpy as np\ndef or_(a, b):\n    return np.logical_or(a, b)",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "logical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639391"
    },
    "not_": {
      "name": "not_",
      "display_name": "Logical NOT",
      "description": "Logical NOT operation",
      "function_code": "import numpy as np\ndef not_(a):\n    return np.logical_not(a)",
      "parameter_count": 1,
      "return_type": "bool",
      "category": "logical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639392"
    },
    "nand_": {
      "name": "nand_",
      "display_name": "Logical NAND",
      "description": "Logical NAND operation",
      "function_code": "import numpy as np\ndef nand_(a, b):\n    return np.logical_not(np.logical_and(a, b))",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "logical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639394"
    },
    "nor_": {
      "name": "nor_",
      "display_name": "Logical NOR",
      "description": "Logical NOR operation",
      "function_code": "import numpy as np\ndef nor_(a, b):\n    return np.logical_not(np.logical_or(a, b))",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "logical",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639395"
    },
    "greater_than_or_equal": {
      "name": "greater_than_or_equal",
      "display_name": "Greater Than or Equal",
      "description": "Check if first value is greater than or equal to second",
      "function_code": "def greater_than_or_equal(a, b):\n    return a >= b",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "comparison",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639397"
    },
    "less_than_or_equal": {
      "name": "less_than_or_equal",
      "display_name": "Less Than or Equal",
      "description": "Check if first value is less than or equal to second",
      "function_code": "def less_than_or_equal(a, b):\n    return a <= b",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "comparison",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639398"
    },
    "greater_than": {
      "name": "greater_than",
      "display_name": "Greater Than",
      "description": "Check if first value is greater than second",
      "function_code": "def greater_than(a, b):\n    return a > b",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "comparison",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639400"
    },
    "less_than": {
      "name": "less_than",
      "display_name": "Less Than",
      "description": "Check if first value is less than second",
      "function_code": "def less_than(a, b):\n    return a < b",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "comparison",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639402"
    },
    "equal": {
      "name": "equal",
      "display_name": "Equal",
      "description": "Check if two values are equal",
      "function_code": "def equal(a, b):\n    return a == b",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "comparison",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639403"
    },
    "not_equal": {
      "name": "not_equal",
      "display_name": "Not Equal",
      "description": "Check if two values are not equal",
      "function_code": "def not_equal(a, b):\n    return a != b",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "comparison",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639405"
    },
    "if_": {
      "name": "if_",
      "display_name": "Conditional",
      "description": "If condition is true return first value, else second value",
      "function_code": "import numpy as np\ndef if_(i, o0, o1):\n    return np.where(i, o0, o1)",
      "parameter_count": 3,
      "return_type": "any",
      "category": "conditional",
      "created_by": "system",
      "is_builtin": true,
      "created_at": "2025-09-18T16:40:10.639406"
    },
    "Equal_": {
      "name": "Equal_",
      "display_name": "Equality",
      "description": "Check if two values are equal",
      "function_code": "def Equal_(a, b):\n    \"\"\"\n    Custom operator function.\n    \n    Args:\n        a: First parameter\n        b: Second parameter\n    \n    Returns:\n        Result of the operation\n    \"\"\"\n    # Add your custom logic here\n    return a + b  # Example: addition",
      "parameter_count": 2,
      "return_type": "bool",
      "category": "comparison",
      "created_by": "user",
      "is_builtin": false,
      "created_at": "2025-09-18T16:48:58.592828"
    }
  }
}